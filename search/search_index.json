{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230 OI Wiki","text":"<p>\u8fd9\u662f OI Wiki \u7684\u9996\u9875\u3002\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u5bfc\u822a\u5230\u5404\u4e2a\u6587\u7ae0\u3002</p>"},{"location":"GraphTheory/","title":"\u5b9a\u4e49\u4e0e\u8bb0\u53f7","text":"<p>\u6d89\u53ca\u5e38\u89c1\u6216\u53ef\u80fd\u7528\u5230\u7684\u6982\u5ff5\u7684\u5b9a\u4e49\u3002\u5173\u4e8e\u66f4\u591a\uff0c\u89c1\u53c2\u8003\u8d44\u6599\u3002</p>"},{"location":"GraphTheory/#_2","title":"\u57fa\u672c\u5b9a\u4e49","text":"<ul> <li>\u56fe\uff1a\u4e00\u5f20\u56fe $G$ \u7531\u82e5\u5e72\u4e2a\u70b9\u548c\u8fde\u63a5\u8fd9\u4e9b\u70b9\u7684\u8fb9\u6784\u6210\u3002\u79f0\u70b9\u7684\u96c6\u5408\u4e3a \u70b9\u96c6 $V$\uff0c\u8fb9\u7684\u96c6\u5408\u4e3a \u8fb9\u96c6 $E$\uff0c\u8bb0 $G = (V, E)$\u3002</li> <li>\u9636\uff1a\u56fe $G$ \u7684\u70b9\u6570 $|V|$ \u79f0\u4e3a \u9636\uff0c\u8bb0\u4f5c $|G|$\u3002</li> <li>\u65e0\u5411\u56fe\uff1a\u82e5 $e \\in E$ \u6ca1\u6709\u65b9\u5411\uff0c\u5219\u79f0 $G$ \u4e3a \u65e0\u5411\u56fe\u3002\u65e0\u5411\u56fe\u7684\u8fb9\u8bb0\u4f5c $e = (u, v)$\uff0c$u, v$ \u4e4b\u95f4\u65e0\u5e8f\u3002</li> <li>\u6709\u5411\u56fe\uff1a\u82e5 $e \\in E$ \u6709\u65b9\u5411\uff0c\u5219\u79f0 $G$ \u4e3a \u6709\u5411\u56fe\u3002\u6709\u5411\u56fe\u7684\u8fb9\u8bb0\u4f5c $e = u \\to v$ \u6216 $e = (u, v)$\uff0c$u, v$ \u4e4b\u95f4\u6709\u5e8f\u3002\u65e0\u5411\u8fb9 $(u, v)$ \u53ef\u4ee5\u89c6\u4e3a\u4e24\u6761\u6709\u5411\u8fb9 $u \\to v$ \u548c $v \\to u$\u3002</li> <li>\u91cd\u8fb9\uff1a\u7aef\u70b9\u548c\u65b9\u5411\uff08\u6709\u5411\u56fe\uff09\u5b8c\u5168\u76f8\u540c\u7684\u8fb9\u79f0\u4e3a \u91cd\u8fb9\u3002</li> <li>\u81ea\u73af\uff1a\u8fde\u63a5\u76f8\u540c\u70b9\u7684\u8fb9\u79f0\u4e3a \u81ea\u73af\u3002</li> </ul>"},{"location":"GraphTheory/#_3","title":"\u76f8\u90bb\u76f8\u5173","text":"<ul> <li>\u76f8\u90bb\uff1a\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u79f0 $u,v$ \u76f8\u90bb \u5f53\u4e14\u4ec5\u5f53\u5b58\u5728 $e=(u,v)$\u3002</li> <li>\u90bb\u57df\uff1a\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u70b9 $u$ \u7684 \u90bb\u57df \u4e3a\u6240\u6709\u4e0e\u4e4b\u76f8\u90bb\u7684\u70b9\u7684\u96c6\u5408\uff0c\u8bb0\u4f5c $N(u)$\u3002</li> <li>\u90bb\u8fb9\uff1a\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u4e0e $u$ \u76f8\u8fde\u7684\u8fb9 $(u, v)$ \u79f0\u4e3a $u$ \u7684 \u90bb\u8fb9\u3002</li> <li>\u51fa\u8fb9 / \u5165\u8fb9\uff1a\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u4ece $u$ \u51fa\u53d1\u7684\u8fb9 $u \\to v$ \u79f0\u4e3a $u$ \u7684 \u51fa\u8fb9\uff0c\u5230\u8fbe $u$ \u7684\u8fb9 $v \\to u$ \u79f0\u4e3a $u$ \u7684 \u5165\u8fb9\u3002</li> <li>\u5ea6\u6570\uff1a\u4e00\u4e2a\u70b9\u7684 \u5ea6\u6570 \u4e3a\u4e0e\u4e4b\u5173\u8054\u7684\u8fb9\u7684\u6570\u91cf\uff0c\u8bb0\u4f5c $d(u)$\uff0c$d(u) = \\sum_{e \\in E} ([u = eu] + [u = ev])$\u3002\u6bcf\u4e2a\u70b9\u7684\u81ea\u73af\u5bf9\u5176\u5ea6\u6570\u4ea7\u751f 2 \u7684\u8d21\u732e\u3002</li> <li>\u51fa\u5ea6 / \u5165\u5ea6\uff1a\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u4ece $u$ \u51fa\u53d1\u7684\u8fb9\u7684\u6570\u91cf\u79f0\u4e3a $u$ \u7684 \u51fa\u5ea6\uff0c\u8bb0\u4f5c $d^+(u)$\uff1b\u5230\u8fbe $u$ \u7684\u8fb9\u7684\u6570\u91cf\u79f0\u4e3a $u$ \u7684 \u5165\u5ea6\uff0c\u8bb0\u4f5c $d^-(u)$\u3002 ta</li> </ul>"},{"location":"GraphTheory/#_4","title":"\u8def\u5f84\u76f8\u5173","text":"<ul> <li>\u9014\u5f84\uff1a\u8fde\u63a5\u4e00\u4e32\u7ed3\u70b9\u7684\u5e8f\u5217\u79f0\u4e3a \u9014\u5f84\uff0c\u7528\u70b9\u5e8f\u5217 $v_0 \\cdots v_k$ \u548c\u8fb9\u5e8f\u5217 $e_1 \\cdots e_k$ \u63cf\u8ff0\uff0c\u5176\u4e2d $e_i = (v_{i-1}, v_i)$\u3002\u901a\u5e38\u5199\u4e3a $v_0 \\to v_1 \\to \\cdots \\to v_k$\u3002</li> <li>\u8ff9\uff1a\u4e0d\u7ecf\u8fc7\u91cd\u590d\u8fb9\u7684\u9014\u5f84\u79f0\u4e3a \u8ff9\u3002</li> <li>\u56de\u8def\uff1a$v_0 = v_k$ \u7684\u8ff9\u79f0\u4e3a \u56de\u8def\u3002</li> <li>\u8def\u5f84\uff1a\u4e0d\u7ecf\u8fc7\u91cd\u590d\u70b9\u7684\u8ff9\u79f0\u4e3a \u8def\u5f84\uff0c\u4e5f\u79f0 \u7b80\u5355\u8def\u5f84\u3002\u4e0d\u7ecf\u8fc7\u91cd\u590d\u70b9\u6bd4\u4e0d\u7ecf\u8fc7\u91cd\u590d\u8fb9\u5f3a\uff0c\u6240\u4ee5\u4e0d\u7ecf\u8fc7\u91cd\u590d\u70b9\u7684\u9014\u5f84\u4e5f\u662f\u8def\u5f84\u3002\u6ce8\u610f\u9898\u76ee\u4e2d\u7684\u7b80\u5355\u8def\u5f84\u53ef\u80fd\u6307\u8ff9\u3002</li> <li>\u73af\uff1a\u9664 $v_0 = v_k$ \u5916\u6240\u6709\u70b9\u4e92\u4e0d\u76f8\u540c\u7684\u9014\u5f84\u79f0\u4e3a \u73af\uff0c\u4e5f\u79f0 \u5708 \u6216 \u7b80\u5355\u73af\u3002</li> </ul>"},{"location":"GraphTheory/#_5","title":"\u8fde\u901a\u6027\u76f8\u5173","text":"<ul> <li>\u8fde\u901a\uff1a\u5bf9\u4e8e\u65e0\u5411\u56fe\u7684\u4e24\u70b9 $u, v$\uff0c\u82e5\u5b58\u5728\u9014\u5f84\u4f7f\u5f97 $v_0 = u$ \u4e14 $v_k = v$\uff0c\u5219\u79f0 $u, v$ \u8fde\u901a\u3002</li> <li>\u5f31\u8fde\u901a\uff1a\u5bf9\u4e8e\u6709\u5411\u56fe\u7684\u4e24\u70b9 $u, v$\uff0c\u82e5\u5c06\u6709\u5411\u8fb9\u6539\u4e3a\u65e0\u5411\u8fb9\u540e $u, v$ \u8fde\u901a\uff0c\u5219\u79f0 $u, v$ \u5f31\u8fde\u901a\u3002</li> <li>\u8fde\u901a\u56fe\uff1a\u4efb\u610f\u4e24\u70b9\u8fde\u901a\u7684\u65e0\u5411\u56fe\u79f0\u4e3a \u8fde\u901a\u56fe\u3002</li> <li>\u5f31\u8fde\u901a\u56fe\uff1a\u4efb\u610f\u4e24\u70b9\u5f31\u8fde\u901a\u7684\u6709\u5411\u56fe\u79f0\u4e3a \u5f31\u8fde\u901a\u56fe\u3002</li> <li>\u53ef\u8fbe\uff1a\u5bf9\u4e8e\u6709\u5411\u56fe\u7684\u4e24\u70b9 $u, v$\uff0c\u82e5\u5b58\u5728\u9014\u5f84\u4f7f\u5f97 $v_0 = u$ \u4e14 $v_k = v$\uff0c\u5219\u79f0 $u$ \u53ef\u8fbe $v$\uff0c\u8bb0\u4f5c $u \\Rightarrow v$\u3002</li> <li>\u5173\u4e8e\u70b9\u53cc\u8fde\u901a / \u8fb9\u53cc\u8fde\u901a / \u5f3a\u8fde\u901a\uff0c\u89c1\u5bf9\u5e94\u7ae0\u8282\u3002</li> </ul>"},{"location":"GraphTheory/#_6","title":"\u7279\u6b8a\u56fe","text":"<ul> <li>\u7b80\u5355\u56fe\uff1a\u4e0d\u542b\u91cd\u8fb9\u548c\u81ea\u73af\u7684\u56fe\u79f0\u4e3a \u7b80\u5355\u56fe\u3002</li> <li>\u57fa\u56fe\uff1a\u5c06\u6709\u5411\u56fe\u7684\u6240\u6709\u6709\u5411\u8fb9\u66ff\u6362\u4e3a\u65e0\u5411\u8fb9\u5f97\u5230\u7684\u56fe\u79f0\u4e3a\u8be5\u6709\u5411\u56fe\u7684 \u57fa\u56fe\u3002</li> <li>\u6709\u5411\u65e0\u73af\u56fe\uff1a\u4e0d\u542b\u73af\u7684\u6709\u5411\u56fe\u79f0\u4e3a \u6709\u5411\u65e0\u73af\u56fe\uff0c\u7b80\u79f0 $\\texttt{DAG}$\uff08$\\texttt{Directed Acyclic Graph}$\uff09\u3002</li> <li>\u5b8c\u5168\u56fe\uff1a\u4efb\u610f\u4e0d\u540c\u7684\u4e24\u70b9\u4e4b\u95f4\u6070\u6709\u4e00\u6761\u8fb9\u7684\u65e0\u5411\u7b80\u5355\u56fe\u79f0\u4e3a \u5b8c\u5168\u56fe\u3002$n$ \u9636\u5b8c\u5168\u56fe\u8bb0\u4f5c $K_n$\u3002</li> <li>\u6811\uff1a\u4e0d\u542b\u73af\u7684\u65e0\u5411\u8fde\u901a\u56fe\u79f0\u4e3a \u6811\u3002\u6811\u662f\u7b80\u5355\u56fe\uff0c\u6ee1\u8db3 $|V|=|E|+1$\u3002\u82e5\u5e72\u68f5\uff08\u5305\u62ec\u4e00\u68f5\uff09\u6811\u7ec4\u6210\u7684\u8fde\u901a\u5757\u79f0\u4e3a \u68ee\u6797\u3002\u76f8\u5173\u77e5\u8bc6\u70b9\u89c1 \u201c\u6811\u8bba\u201d\u3002</li> <li>\u7a00\u758f\u56fe / \u7a20\u5bc6\u56fe\uff1a $|E|$ \u8fdc\u5c0f\u4e8e $|V|^2$ \u7684\u56fe\u79f0\u4e3a \u7a00\u758f\u56fe\uff0c$|E|$ \u63a5\u8fd1 $|V|^2$ \u7684\u56fe\u79f0\u4e3a \u7a20\u5bc6\u56fe\u3002\u8fd9\u4e24\u4e2a\u6982\u5ff5\u6ca1\u6709\u4e25\u683c\u5b9a\u4e49\uff0c\u7528\u4e8e\u8ba8\u8bba\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(|E|)$ \u548c $O(|V|^2)$ \u7684\u7b97\u6cd5\u3002</li> </ul>"},{"location":"GraphTheory/#_7","title":"\u5b50\u56fe\u76f8\u5173","text":"<ul> <li>\u5b50\u56fe\uff1a\u6ee1\u8db3 $V' \\subseteq V$ \u4e14 $E' \\subseteq E$ \u7684\u56fe $G' = (V', E')$ \u79f0\u4e3a $G = (V, E)$ \u7684 \u5b50\u56fe\uff0c\u8bb0\u4f5c $G' \\subseteq G$\u3002</li> <li>\u5bfc\u51fa\u5b50\u56fe\uff1a\u9009\u62e9\u82e5\u5e72\u4e2a\u70b9\u4ee5\u53ca\u4e24\u7aef\u90fd\u5728\u8be5\u70b9\u96c6\u7684\u6240\u6709\u8fb9\u6784\u6210\u7684\u5b50\u56fe\u79f0\u4e3a\u8be5\u56fe\u7684 \u5bfc\u51fa\u5b50\u56fe\u3002\u5bfc\u51fa\u5b50\u56fe\u7684\u5f62\u6001\u4ec5\u7531\u9009\u62e9\u7684\u70b9\u96c6 $V'$ \u51b3\u5b9a\uff0c\u79f0\u70b9\u96c6\u4e3a $V'$ \u7684\u5bfc\u51fa\u5b50\u56fe\u4e3a $V'$ \u5bfc\u51fa\u7684\u5b50\u56fe\uff0c\u8bb0\u4f5c $G[V']$\u3002</li> <li>\u751f\u6210\u5b50\u56fe\uff1a$|V'| = |V|$ \u7684\u5b50\u56fe\u79f0\u4e3a \u751f\u6210\u5b50\u56fe\u3002</li> <li>\u6781\u5927\u5b50\u56fe\uff08\u5206\u91cf\uff09\uff1a\u5728\u5b50\u56fe\u6ee1\u8db3\u67d0\u6027\u8d28\u7684\u524d\u63d0\u4e0b\uff0c\u79f0\u5b50\u56fe $G'$ \u662f \u6781\u5927 \u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e0d\u5b58\u5728\u540c\u6837\u6ee1\u8db3\u8be5\u6027\u8d28\u7684\u5b50\u56fe $G''$ \u4e14 $G' \\subset G'' \\subseteq G$\u3002\u79f0 $G'$ \u4e3a\u6ee1\u8db3\u8be5\u6027\u8d28\u7684 \u5206\u91cf\uff0c\u5982\u8fde\u901a\u5206\u91cf\uff0c\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u3002\u6781\u5927\u5b50\u56fe\u4e0d\u80fd\u518d\u6269\u5f20\u3002\u4f8b\u5982\uff0c\u6781\u5927\u7684\u8fde\u901a\u7684\u5b50\u56fe\u79f0\u4e3a\u539f\u56fe\u7684\u8fde\u901a\u5206\u91cf\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u719f\u77e5\u7684\u8fde\u901a\u5757\u3002</li> </ul>"},{"location":"GraphTheory/#_8","title":"\u7ea6\u5b9a","text":"<ul> <li>\u4e00\u822c\u8bb0 $n$ \u8868\u793a\u70b9\u96c6\u5927\u5c0f $|V|$\uff0c$m$ \u8868\u793a\u8fb9\u96c6\u5927\u5c0f $|E|$\u3002</li> </ul>"},{"location":"GraphTheory/#_9","title":"\u62d3\u6251\u6392\u5e8f","text":""},{"location":"GraphTheory/#_10","title":"\u8ba1\u7b97\u65b9\u6cd5","text":"<p>\u5e38\u7528\u7684\u62d3\u6251\u6392\u5e8f\u7b97\u6cd5\u5305\u62ec\u57fa\u4e8e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08$\\texttt{DFS}$\uff09\u7684\u65b9\u6cd5\u548c\u57fa\u4e8e\u5165\u5ea6\u8868\uff08$\\texttt{Kahn}$ \u7b97\u6cd5\uff09\u7684\u65b9\u6cd5\u3002\u8fd9\u91cc\uff0c\u6211\u5c06\u63cf\u8ff0\u57fa\u4e8e\u5165\u5ea6\u8868\u7684\u65b9\u6cd5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5229\u7528\u961f\u5217\u6765\u5b9e\u73b0\uff1a</p> <ol> <li>\u521d\u59cb\u5316\u5165\u5ea6\u8868\uff1a\u904d\u5386\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\uff08\u5373\u6307\u5411\u8be5\u9876\u70b9\u7684\u8fb9\u7684\u6570\u91cf\uff09\u3002</li> <li>\u5c06\u5165\u5ea6\u4e3a $0$ \u7684\u9876\u70b9\u5165\u961f\uff1a\u6240\u6709\u5728\u56fe\u4e2d\u5165\u5ea6\u4e3a $0$ \u7684\u9876\u70b9\uff0c\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u62d3\u6251\u6392\u5e8f\u7684\u8d77\u70b9\uff0c\u5c06\u5b83\u4eec\u52a0\u5165\u5230\u4e00\u4e2a\u961f\u5217\u4e2d\u3002</li> <li>\u5faa\u73af\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\uff1a</li> <li>\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u9876\u70b9 $u$\uff08\u5373\u5f53\u524d\u6392\u5e8f\u7684\u4e0b\u4e00\u4e2a\u9876\u70b9\uff09\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u4e3a\u7ed3\u679c\u5e8f\u5217\u7684\u4e00\u90e8\u5206\u3002</li> <li>\u904d\u5386\u4ece\u9876\u70b9 $u$ \u51fa\u53d1\u7684\u6240\u6709\u8fb9 $(u, v)$\uff0c\u5c06\u6bcf\u4e2a\u76f8\u90bb\u9876\u70b9 $v$ \u7684\u5165\u5ea6\u51cf $1$\uff08\u8868\u793a\u8fb9 $ (u, v) $ \u88ab\u79fb\u9664\uff09\u3002\u5982\u679c\u67d0\u4e2a\u9876\u70b9 $v$ \u7684\u5165\u5ea6\u964d\u4e3a $0$\uff0c\u5219\u5c06 $v$ \u5165\u961f\u3002</li> </ol> <p>$\\texttt{DAG}$ \u7684\u62d3\u6251\u5e8f\u6027\u8d28\u5f88\u597d\uff0c\u5e38\u7528\u4e8e\u89e3\u51b3\u5efa\u56fe\u9898\u6216\u56fe\u8bba\u7c7b\u578b\u7684\u6784\u9020\u9898\uff0c\u5e38\u5e38\u4f1a\u5c06\u56fe\u8f6c\u5316\u4e3a $\\texttt{DAG}$\uff0c\u8fdb\u884c $\\texttt{dp / dfs}$ \u6c42\u89e3\u3002</p>"},{"location":"GraphTheory/#1-b3644","title":"\u4f8b 1: B3644 \u3010\u6a21\u677f\u3011\u62d3\u6251\u6392\u5e8f / \u5bb6\u8c31\u6811","text":""},{"location":"GraphTheory/#_11","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709\u4e2a\u4eba\u7684\u5bb6\u65cf\u5f88\u5927\uff0c\u8f88\u5206\u5173\u7cfb\u5f88\u6df7\u4e71\uff0c\u8bf7\u4f60\u5e2e\u6574\u7406\u4e00\u4e0b\u8fd9\u79cd\u5173\u7cfb\u3002\u7ed9\u51fa\u6bcf\u4e2a\u4eba\u7684\u540e\u4ee3\u7684\u4fe1\u606f\u3002\u8f93\u51fa\u4e00\u4e2a\u5e8f\u5217\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u4eba\u7684\u540e\u8f88\u90fd\u6bd4\u90a3\u4e2a\u4eba\u540e\u5217\u51fa\u3002</p> <p>\u7b2c $1$ \u884c\u4e00\u4e2a\u6574\u6570 $N$\uff08$1 \\le N \\le 100$\uff09\uff0c\u8868\u793a\u5bb6\u65cf\u7684\u4eba\u6570\u3002\u63a5\u4e0b\u6765 $N$ \u884c\uff0c\u7b2c $i$ \u884c\u63cf\u8ff0\u7b2c $i$ \u4e2a\u4eba\u7684\u540e\u4ee3\u7f16\u53f7 $a_{i,j}$\uff0c\u8868\u793a $a_{i,j}$ \u662f $i$ \u7684\u540e\u4ee3\u3002\u6bcf\u884c\u6700\u540e\u662f $0$ \u8868\u793a\u63cf\u8ff0\u5b8c\u6bd5\u3002</p> <p>\u8f93\u51fa\u4e00\u4e2a\u5e8f\u5217\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u4eba\u7684\u540e\u8f88\u90fd\u6bd4\u90a3\u4e2a\u4eba\u540e\u5217\u51fa\u3002\u5982\u679c\u6709\u591a\u79cd\u4e0d\u540c\u7684\u5e8f\u5217\uff0c\u8f93\u51fa\u4efb\u610f\u4e00\u79cd\u5373\u53ef\u3002</p>"},{"location":"GraphTheory/#_12","title":"\u4ee3\u7801","text":"<pre><code>// B3644 \u3010\u6a21\u677f\u3011\u62d3\u6251\u6392\u5e8f / \u5bb6\u8c31\u6811\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXN = 10000;                                     // \u6700\u5927\u9876\u70b9\u6570\uff0c\u6839\u636e\u9700\u8981\u4fee\u6539\nint n, x;                                                   // \u9876\u70b9\u6570\nvector&lt;int&gt; Edge[MAXN];                                     // \u90bb\u63a5\u8868\u8868\u793a\u56fe\nint in_degree[MAXN];                                        // \u5165\u5ea6\u6570\u7ec4\nvoid toposort() {\n    queue&lt;int&gt; Q;\n    for(int i = 1; i &lt;= n; i++) \n        for(int j : Edge[i]) in_degree[j]++;                // \u521d\u59cb\u5316\u5165\u5ea6\u8868\n    for(int i = 1; i &lt;= n; i++) \n        if(in_degree[i] == 0)  Q.push(i);                   // \u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\u5165\u961f\n    while(!Q.empty()) {                                     // \u8fdb\u884c\u62d3\u6251\u6392\u5e8f\n        int u = Q.front(); Q.pop();\n        cout &lt;&lt; u &lt;&lt; \" \";                                   // \u8f93\u51fa\u9876\u70b9\n        for(int i : Edge[u]) {                              // \u904d\u5386u\u7684\u6240\u6709\u90bb\u63a5\u70b9\n            in_degree[i]--;\n            if(in_degree[i] == 0) \n                Q.push(i);\n        }\n    }\n    cout &lt;&lt; endl;\n}\nint main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++)\n        while (cin &gt;&gt; x &amp;&amp; x) \n            Edge[i].push_back(x);\n    toposort();\n    return 0;\n}\n</code></pre>"},{"location":"GraphTheory/#2-cf463d-gargari-and-permutations-texttt1900","title":"\u4f8b 2: CF463D Gargari and Permutations $\\texttt{*1900}$","text":""},{"location":"GraphTheory/#_13","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60 $k$ \u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6392\u5217\uff0c\u6c42\u8fd9\u4e9b\u6392\u5217\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p>"},{"location":"GraphTheory/#_14","title":"\u601d\u8def","text":"<p>\u5148 $O(kn^2)$ \u6c42\u51fa\u62d3\u6251\u5e8f\u3002\u7136\u540e\u6309\u7167\u62d3\u6251\u5e8f\u6765 $\\texttt{dp}$ \u8ba1\u7b97\u3002</p>"},{"location":"GraphTheory/#_15","title":"\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn = 1010;\nint n, m, h[maxn], f[maxn], pos[maxn];\nbool flg[maxn][maxn];\nvector&lt;int&gt; g[maxn];\nint dfs(int u) {\n    if (f[u] != -1) return f[u];\n    f[u] = 0;\n    for (int v : g[u]) f[u] = max(f[u], dfs(v));\n    return ++f[u];\n}\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    memset(f, -1, sizeof f);\n    memset(flg, 1, sizeof flg);\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int k = 0; k &lt; m; k++) {\n        for (int i = 1, x; i &lt;= n; i++) { cin &gt;&gt; x, pos[x] = i; }\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= n; j++) { flg[i][j] &amp;= pos[i] &lt; pos[j]; }\n        }\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            if (flg[i][j]) g[i].push_back(j);\n        }\n    }\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++) { ans = max(ans, dfs(i)); }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"GraphTheory/#_16","title":"\u6700\u77ed\u8def\u95ee\u9898\u7b97\u6cd5","text":""},{"location":"GraphTheory/#textttfloyd","title":"$\\texttt{Floyd}$ \u7b97\u6cd5","text":""},{"location":"GraphTheory/#_17","title":"\u57fa\u672c\u539f\u7406","text":"<p>Floyd-Warshall \u7b97\u6cd5\u662f\u4e00\u79cd\u8ba1\u7b97\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u5bf9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002</p>"},{"location":"GraphTheory/#_18","title":"\u7b97\u6cd5\u6d41\u7a0b","text":"<ol> <li>\u521d\u59cb\u5316\u8ddd\u79bb\u77e9\u9635\uff0c\u5bf9\u89d2\u7ebf\u4e3a0\uff0c\u5176\u4ed6\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u91cd\uff0c\u82e5\u65e0\u76f4\u63a5\u8fb9\u5219\u4e3a\u65e0\u7a77\u5927\u3002</li> <li>\u5bf9\u6bcf\u4e2a\u9876\u70b9 $k $\uff0c\u66f4\u65b0\u6240\u6709\u9876\u70b9\u5bf9 $ (i, j) $ \u7684\u8ddd\u79bb\uff1a<code>dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])</code>\u3002</li> <li>\u91cd\u590d\u6b65\u9aa42\uff0c\u76f4\u5230\u6240\u6709\u70b9\u90fd\u88ab\u8003\u8651\u8fc7\u3002</li> </ol>"},{"location":"GraphTheory/#_19","title":"\u9002\u7528\u573a\u666f","text":"<p>\u9002\u7528\u4e8e\u8ba1\u7b97\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff0c\u7279\u522b\u662f\u70b9\u6570\u91cf\u4e0d\u662f\u5f88\u5927\u65f6\u6548\u679c\u597d\u3002</p>"},{"location":"GraphTheory/#_20","title":"\u4ee3\u7801","text":"<pre><code>void floydWarshall() {\n    for (int k = 1; k &lt;= n; k++) \n        for (int i = 1; i &lt;=n; i++) \n            for (int j = 1; j &lt;= n; j++) \n                if (dist[i][k] + dist[k][j] &lt; dist[i][j]) \n                    dist[i][j] = dist[i][k] + dist[k][j];\n}\n</code></pre>"},{"location":"GraphTheory/#textttdijkstra","title":"$\\texttt{Dijkstra}$ \u7b97\u6cd5","text":""},{"location":"GraphTheory/#_21","title":"\u57fa\u672c\u539f\u7406","text":"<p>$\\texttt{Dijkstra}$ \u7b97\u6cd5\u7528\u4e8e\u5728\u52a0\u6743\u56fe\u4e2d\u627e\u5230\u4e00\u4e2a\u9876\u70b9\u5230\u5176\u4ed6\u6240\u6709\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002</p>"},{"location":"GraphTheory/#_22","title":"\u7b97\u6cd5\u6d41\u7a0b","text":"<ol> <li>\u521d\u59cb\u5316\u8ddd\u79bb\u6570\u7ec4\uff0c\u6e90\u70b9\u8ddd\u79bb\u4e3a $0$\uff0c\u5176\u4f59\u4e3a\u65e0\u7a77\u5927\u3002</li> <li>\u4f7f\u7528\u4f18\u5148\u961f\u5217\uff08\u6216\u5806\uff09\u6765\u5b58\u50a8\u6240\u6709\u8282\u70b9\uff0c\u4f18\u5148\u7ea7\u4e3a\u8282\u70b9\u7684\u5f53\u524d\u8ddd\u79bb\u3002</li> <li>\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u8ddd\u79bb\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u66f4\u65b0\u5176\u76f8\u90bb\u8282\u70b9\u7684\u8ddd\u79bb\u3002</li> <li>\u91cd\u590d\u6b65\u9aa43\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u6216\u627e\u5230\u76ee\u6807\u8282\u70b9\u3002</li> </ol>"},{"location":"GraphTheory/#_23","title":"\u9002\u7528\u573a\u666f","text":"<p>\u9002\u7528\u4e8e\u65e0\u8d1f\u6743\u8fb9\u7684\u56fe\u3002</p>"},{"location":"GraphTheory/#1-cf449b-jzzhu-and-cities-texttt2000","title":"\u4f8b 1 CF449B Jzzhu and Cities $\\texttt{*2000}$","text":""},{"location":"GraphTheory/#_24","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>$n$ \u4e2a\u70b9\uff0c$m$ \u6761\u5e26\u6743\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u53e6\u5916\u8fd8\u6709 $k$ \u6761\u7279\u6b8a\u8fb9\uff0c\u6bcf\u6761\u8fb9\u8fde\u63a5 $1$ \u548c $i$ \u3002</p> <p>\u95ee\u6700\u591a\u53ef\u4ee5\u5220\u9664\u8fd9 $k$ \u6761\u8fb9\u4e2d\u7684\u591a\u5c11\u6761\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u5230 $1$ \u7684\u6700\u77ed\u8ddd\u79bb\u4e0d\u53d8\u3002</p>"},{"location":"GraphTheory/#_25","title":"\u601d\u8def","text":"<p>\u8dd1\u4e00\u904d $\\texttt{Dijkstra}$\uff0c\u8ba1\u7b97\u51fa\u76f8\u7b49\u8def\u5f84\u7684\u6761\u6570\uff0c\u5224\u65ad\u5220\u9664\u3002</p>"},{"location":"GraphTheory/#_26","title":"\u4ee3\u7801","text":"<pre><code>// \u65e0\u5411\u56fe\n#include &lt;bits/stdc++.h&gt;\n#define pii pair &lt;int, int&gt;\nusing namespace std;\nconst int N = 1e5 + 10;\nint n, m, k, x, y, z, ans;\nint dist[N], cnt[N], vis[N];\nvector &lt; pii &gt; edge[N];\nvector &lt; pii &gt; spe;\n\npriority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n\nvoid dijkstra(int start) {\n    for (int i = 1; i &lt;= n; i++) dist[i] = 1e9;\n    dist[start] = 0;\n    pq.push({0, start});\n\n    while (!pq.empty()) {\n        int d = pq.top().first;\n        int u = pq.top().second;\n        pq.pop();\n\n        if (vis[u]) continue;\n        vis[u] = 1;\n        for (pii i : edge[u]) {\n            if (dist[i.first] == dist[u] + i.second) cnt[i.first]++;\n            if (dist[i.first] &gt; dist[u] + i.second) {\n                dist[i.first] = dist[u] + i.second;\n                cnt[i.first] = 1;\n                pq.push({dist[i.first], i.first});\n            }\n        }\n    }\n}\n\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n        edge[x].push_back({y, z});\n        edge[y].push_back({x, z});\n    }\n    for (int i = 1; i &lt;= k; i++) {\n        cin &gt;&gt; y &gt;&gt; z;\n        spe.push_back({y, z});\n        edge[1].push_back({y, z});\n        edge[y].push_back({1, z});\n    }\n    dijkstra(1); // \u7b97\u51fa\u6bcf\u4e00\u4e2a\u7684\u8ddd\u79bb\u3002\n    for (pii i : spe) {\n        if (dist[i.first] &lt; i.second) ans++;\n        if (dist[i.first] == i.second &amp;&amp; cnt[i.first] &gt; 1) \n            ans++, cnt[i.first]--;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"GraphTheory/#textttspfa","title":"$\\texttt{SPFA}$ \u7b97\u6cd5","text":"<p>\u5173\u4e8e $\\texttt{SPFA}$, \u4ed6 __ \u4e86\u3002</p> <p>\u57fa\u672c\u539f\u7406\uff1a $\\texttt{SPFA}$ \u662f $\\texttt{Bellman-Ford}$ \u7b97\u6cd5\u7684\u4e00\u79cd\u6539\u8fdb\uff0c\u7528\u4e8e\u6c42\u89e3\u5355\u6e90\u6700\u77ed\u8def\u5f84\u95ee\u9898\u3002\u5b83\u901a\u8fc7\u4f7f\u7528\u961f\u5217\u4f18\u5316\u4e86\u7b97\u6cd5\u7684\u6548\u7387\u3002</p> <p>\u7b97\u6cd5\u6d41\u7a0b\uff1a</p> <ol> <li>\u521d\u59cb\u5316\u8ddd\u79bb\u6570\u7ec4\uff0c\u6e90\u70b9\u8ddd\u79bb\u4e3a0\uff0c\u5176\u4f59\u4e3a\u65e0\u7a77\u5927\u3002</li> <li>\u5c06\u6e90\u70b9\u5165\u961f\u3002</li> <li>\u5f53\u961f\u5217\u975e\u7a7a\u65f6\uff0c\u53d6\u51fa\u961f\u9996\u5143\u7d20\uff0c\u904d\u5386\u5176\u6240\u6709\u51fa\u8fb9\u3002</li> <li>\u5982\u679c\u901a\u8fc7\u5f53\u524d\u70b9\u53ef\u4ee5\u4f7f\u5f97\u5230\u8fbe\u67d0\u4e2a\u70b9\u7684\u8ddd\u79bb\u66f4\u77ed\uff0c\u5219\u66f4\u65b0\u8ddd\u79bb\u5e76\u5c06\u8be5\u70b9\u5165\u961f\uff08\u5982\u679c\u5b83\u5f53\u524d\u4e0d\u5728\u961f\u5217\u4e2d\uff09\u3002</li> <li>\u91cd\u590d\u6b65\u9aa43\u548c4\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u3002</li> </ol> <p>\u9002\u7528\u573a\u666f\uff1a \u9002\u7528\u4e8e\u542b\u8d1f\u6743\u8fb9\u4f46\u65e0\u8d1f\u6743\u56de\u8def\u7684\u56fe\u3002</p>"},{"location":"GraphTheory/#texttttarjan","title":"$\\texttt{Tarjan}$ \u7b97\u6cd5","text":""},{"location":"GraphTheory/#texttttrajan-textttscc","title":"$\\texttt{Trajan}$ \u6c42 $\\texttt{SCC}$","text":""},{"location":"GraphTheory/#_27","title":"\u7b97\u6cd5\u63cf\u8ff0","text":"<ul> <li>$\\texttt{Tarjan}$ \u7b97\u6cd5\u7528\u4e8e\u5728\u6709\u5411\u56fe\u4e2d\u5bfb\u627e\u5f3a\u8fde\u901a\u5206\u91cf\uff08$\\texttt{SCC}$\uff09\u3002\u7b97\u6cd5\u901a\u8fc7\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08$\\texttt{DFS}$\uff09\u904d\u5386\u56fe\uff0c\u5e76\u5229\u7528\u6808\u7ef4\u62a4\u8bbf\u95ee\u8fc7\u7684\u9876\u70b9\uff0c\u4ece\u800c\u5728\u56de\u6eaf\u65f6\u80fd\u591f\u8bc6\u522b\u5e76\u6784\u6210\u5f3a\u8fde\u901a\u5206\u91cf\u3002</li> </ul>"},{"location":"GraphTheory/#_28","title":"\u4ee3\u7801\u89e3\u91ca","text":"<ul> <li><code>s.push(x), vis[x] = 1;</code>\uff1a\u5f53\u524d\u9876\u70b9 <code>x</code> \u5165\u6808\uff0c\u5e76\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\u3002</li> <li><code>dfn[x] = low[x] = ++tim;</code>\uff1a\u4e3a\u9876\u70b9 <code>x</code> \u5206\u914d\u4e00\u4e2a\u8bbf\u95ee\u7f16\u53f7\u548c\u6700\u5c0f\u53ef\u56de\u6eaf\u7f16\u53f7\u3002</li> <li>\u904d\u5386 <code>x</code> \u7684\u6bcf\u4e2a\u90bb\u63a5\u9876\u70b9 <code>i</code>\uff1a</li> <li>\u5982\u679c <code>i</code> \u672a\u88ab\u8bbf\u95ee\uff08<code>!dfn[i]</code>\uff09\uff0c\u9012\u5f52\u8c03\u7528 <code>tarjan(i)</code>\uff0c\u5e76\u66f4\u65b0 <code>x</code> \u7684 <code>low</code> \u503c\u3002</li> <li>\u5982\u679c <code>i</code> \u5df2\u5728\u6808\u4e2d\uff08<code>vis[i]</code>\uff09\uff0c\u5219\u66f4\u65b0 <code>x</code> \u7684 <code>low</code> \u503c\u3002</li> <li>\u5982\u679c <code>dfn[x] == low[x]</code>\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u8282\u70b9\uff1a</li> <li>\u901a\u8fc7\u5faa\u73af\u5c06\u6808\u4e2d\u7684\u5143\u7d20\u51fa\u6808\uff0c\u76f4\u5230\u9047\u5230 <code>x</code>\uff0c\u540c\u65f6\u4e3a\u51fa\u6808\u7684\u9876\u70b9\u5206\u914d\u76f8\u540c\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\uff0c\u5e76\u7d2f\u52a0\u5bf9\u5e94\u7684\u503c\u3002</li> </ul>"},{"location":"GraphTheory/#_29","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(V + E)$\uff0c\u5176\u4e2d $V$ \u662f\u9876\u70b9\u6570\uff0c$E$ \u662f\u8fb9\u6570\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(V)$\uff0c\u4e3b\u8981\u662f\u7528\u4e8e\u5b58\u50a8\u6808\u3001\u8bbf\u95ee\u6807\u8bb0\u3001\u65f6\u95f4\u6233\u7b49\u4fe1\u606f\u3002</li> </ul> <p>\u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570\u5b9e\u73b0\uff0c$\\texttt{Tarjan}$ \u7b97\u6cd5\u80fd\u6709\u6548\u5730\u5728\u6709\u5411\u56fe\u4e2d\u8bc6\u522b\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5e76\u80fd\u5904\u7406\u6bcf\u4e2a\u5206\u91cf\u7684\u7d2f\u8ba1\u503c\u95ee\u9898\u3002\u5e0c\u671b\u8fd9\u6837\u7684\u7b14\u8bb0\u80fd\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u7406\u89e3\u548c\u4f7f\u7528 $\\texttt{Tarjan}$ \u7b97\u6cd5\u3002</p>"},{"location":"GraphTheory/#_30","title":"\u4ee3\u7801","text":"<pre><code>void tarjan(int x) {\n    s.push(x), vis[x] = 1;\n    dfn[x] = low[x] = ++tim;\n    for (int i : Edge[x]) {\n        if (!dfn[i]) {\n            tarjan(i);\n            low[x] = min(low[x], low[i]);\n            low[x] = min(low[x], dfn[i]);\n        } else if (vis[i]) {\n            low[x] = min(low[x], dfn[i]);\n            low[x] = min(low[x], low[i]);\n        }\n    }\n\n    if (dfn[x] == low[x]) {\n        ++count_scc;\n        while (s.top() != x) {\n            color[s.top()] = count_scc;\n            sum[count_scc] += val[s.top()];\n            vis[s.top()] = false;\n            s.pop();\n        }\n        color[s.top()] = count_scc;\n        sum[count_scc] += val[s.top()];\n        vis[s.top()] = false;\n        s.pop();\n    }\n}\n</code></pre>"},{"location":"GraphTheory/#1-cf949c-data-center-maintenance","title":"\u4f8b 1: CF949C Data Center Maintenance","text":""},{"location":"GraphTheory/#_31","title":"\u9898\u610f","text":"<p>\u9898\u610f : $n$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u503c $a_i$\u3002$m$ \u6761\u8fb9\uff0c\u6bcf\u4e2a\u6761\u8fb9\u94fe\u63a5 $2$ \u4e2a\u70b9 $x\uff0cy$ \u4f7f\u5f97 $a_x \\not =a_y$\u3002\u9009\u62e9\u6700\u5c11\u7684 $k(1 \\le k \\le n)$ \u4e2a\u70b9\uff0c\u4f7f $a_i = (a_i + 1) \\mod h$\uff0c$m$ \u4e2a\u6761\u4ef6\u4ecd\u6210\u7acb\u3002</p>"},{"location":"GraphTheory/#_32","title":"\u9898\u89e3","text":"<ol> <li>\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c $x_i = y_i + 1$ \u5219\u628a $x_i$ \u5411 $y_i$ \u8fde\u4e00\u6761\u8fb9</li> <li>\u7f29\u70b9</li> <li>$\\texttt{DAG}$ \u4e0a\u8dd1\u6ca1\u6709\u51fa\u5ea6\u6743\u503c\u6700\u5c0f\u7684\u70b9\u3002</li> </ol>"},{"location":"GraphTheory/#_33","title":"\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define debug(x) cerr &lt;&lt; #x &lt;&lt; \" \" &lt;&lt; x &lt;&lt; '\\n';\n#define multi false\nusing namespace std;\nconst int N = 1e5 + 10;\nint t = 1, n, m, h, x, y, tim, scc_count, ansid;\nint val[N], dfn[N], low[N], vis[N], color[N], siz[N];\nstack &lt;int&gt; s;\nvector &lt;int&gt; Edge[N];\nvector &lt;int&gt; scc[N];\nvoid tarjan (int x) {\n    vis[x] = 1; s.push(x);\n    dfn[x] = low[x] = ++tim;\n    for (int i : Edge[x]) {\n        if (!dfn[i]) {\n            tarjan(i);\n            low[x] = min(low[x], low[i]);\n            low[x] = min(low[x], dfn[i]);\n        } else if (vis[i]) {\n            low[x] = min(low[x], low[i]);\n            low[x] = min(low[x], dfn[i]);\n        }\n    }\n    if (low[x] == dfn[x]) {\n        scc_count++;\n        while (s.top() != x) {\n            color[s.top()] = scc_count;\n            vis[s.top()] = 0;\n            siz[scc_count]++; \n            s.pop();\n        }\n        color[s.top()] = scc_count;\n        vis[s.top()] = 0;\n        siz[scc_count]++; \n        s.pop();\n    }\n    return;\n}\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; h;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; val[i];\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; x &gt;&gt; y;\n        if ((val[x] + 1) % h == val[y]) Edge[x].push_back(y);\n        if (val[x] == (val[y] + 1) % h) Edge[y].push_back(x);\n    }\n    for (int i = 1; i &lt;= n; i++) \n        if (!dfn[i]) tarjan(i);\n    for (int i = 1; i &lt;= n; i++)\n        for (int j : Edge[i])\n            if (color[i] != color[j])\n                scc[color[i]].push_back(color[j]);\n    for (int i = 1; i &lt;= scc_count; i++) \n        if (scc[i].size() == 0 &amp;&amp; (siz[i] &lt; siz[ansid] || ansid == 0))\n            ansid = i;\n    cout &lt;&lt; siz[ansid] &lt;&lt; '\\n';\n    for (int i = 1; i &lt;= n; i++)\n        if (color[i] == ansid)\n            cout &lt;&lt; i &lt;&lt; ' ';\n    return;\n}\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    if (multi) cin &gt;&gt; t;\n    while (t--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"GraphTheory/#texttttrajan","title":"$\\texttt{Trajan}$ \u7f29\u70b9","text":""},{"location":"GraphTheory/#_34","title":"\u7b97\u6cd5\u63cf\u8ff0","text":"<ol> <li>\u6c42\u51fa\u6240\u6709\u7684 $\\texttt{SCC}$\u3002</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a $\\texttt{SCC}$\uff0c\u628a\u6240\u6709\u7684\u70b9\u7f29\u6210\u4e00\u4e2a\u70b9\u3002\u5e76\u6c42\u51fa\u5176\u6743\u503c(\u8fd9\u4e2a\u662f\u8981\u6839\u636e\u9898\u610f\u6765\u7684\uff0c\u6bd4\u5982\u4f8b\u9898\u662f\u6c42 $\\texttt{SCC}$ \u7684\u6743\u503c\u548c)\u3002</li> <li>\u5bf9\u4e8e\u539f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a $\\texttt{SCC}$ \u4e2d\uff0c\u5219\u628a\u8fd9\u6761\u8fb9\u8fde\u5230\u4e24\u4e2a $\\texttt{SCC}$ \u4e0a\u3002</li> <li>\u5bf9\u4e8e\u7f29\u70b9\u540e\u7684\u56fe\uff0c\u5f62\u6210\u4e86\u4e00\u4e2a $\\texttt{DAG}$\u3002</li> </ol>"},{"location":"GraphTheory/#1-p3387","title":"\u4f8b1: P3387","text":""},{"location":"GraphTheory/#_35","title":"\u9898\u610f","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u6c42\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u8def\u5f84\u7ecf\u8fc7\u7684\u70b9\u6743\u503c\u4e4b\u548c\u6700\u5927\u3002\u4f60\u53ea\u9700\u8981\u6c42\u51fa\u8fd9\u4e2a\u6743\u503c\u548c\u3002</p> <p>\u5141\u8bb8\u591a\u6b21\u7ecf\u8fc7\u4e00\u6761\u8fb9\u6216\u8005\u4e00\u4e2a\u70b9\uff0c\u4f46\u662f\uff0c\u91cd\u590d\u7ecf\u8fc7\u7684\u70b9\uff0c\u6743\u503c\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002</p>"},{"location":"GraphTheory/#_36","title":"\u9898\u89e3","text":"<ol> <li>\u6c42\u51fa\u6240\u6709\u7684 $\\texttt{SCC}$\u3002</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a $\\texttt{SCC}$\uff0c\u628a\u6240\u6709\u7684\u70b9\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u5e76\u6c42\u51fa\u5176\u6743\u503c\u548c\u3002</li> <li>\u5bf9\u4e8e\u539f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a $\\texttt{SCC}$ \u4e2d\uff0c\u5219\u628a\u8fd9\u6761\u8fb9\u8fde\u5230\u4e24\u4e2a $\\texttt{SCC}$ \u4e0a\u3002</li> <li>\u5bf9\u4e8e\u7f29\u70b9\u540e\u7684\u56fe\uff0c\u5f62\u6210\u4e86\u4e00\u4e2a $\\texttt{DAG}$\u3002</li> <li>\u5728 $\\texttt{DAG}$ \u4e0a\u8dd1 $\\texttt{DP}$\uff0c\u6c42\u51fa\u8def\u5f84\u7ecf\u8fc7\u7684\u70b9\u6743\u503c\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002</li> </ol>"},{"location":"GraphTheory/#_37","title":"\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define debug(x) cerr &lt;&lt; #x &lt;&lt; \" \" &lt;&lt; x &lt;&lt; '\\n';\n#define multi false\nusing namespace std;\nconst int N = 1e5 + 10;\nconst int M = 1e5 + 10;\nint t = 1, n, m, tim, count_scc, ans;\nint x[M], y[M], val[N], color[N], sum[N], f[N];\nint vis[N], low[N], dfn[N];\nvector &lt;int&gt; Edge[N];\nvector &lt;int&gt; scc[N]; // scc edge\nstack &lt;int&gt; s;\nvoid tarjan(int x) {\n    s.push(x), vis[x] = 1;\n    dfn[x] = low[x] = ++tim;\n    for (int i : Edge[x]) {\n        if (!dfn[i]) {\n            tarjan(i);\n            low[x] = min(low[x], low[i]);\n            low[x] = min(low[x], dfn[i]);\n        } else if (vis[i]) {\n            low[x] = min(low[x], dfn[i]);\n            low[x] = min(low[x], low[i]);\n        }\n    }\n\n    if (dfn[x] == low[x]) {\n        ++count_scc;\n        while (s.top() != x) {\n            color[s.top()] = count_scc;\n            sum[count_scc] += val[s.top()];\n            vis[s.top()] = false;\n            s.pop();\n        }\n        color[s.top()] = count_scc;\n        sum[count_scc] += val[s.top()];\n        vis[s.top()] = false;\n        s.pop();\n    }\n}\nint dfs(int x) {\n    if (f[x]) return f[x];\n    f[x] = sum[x];\n    for (int i : scc[x]) \n        f[x] = max(f[x], dfs(i) + sum[x]);\n    return f[x];\n}\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; val[i];\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; x[i] &gt;&gt; y[i];\n        Edge[x[i]].push_back(y[i]);\n    }\n    for (int i = 1; i &lt;= n; i++) \n        if (!dfn[i]) \n            tarjan(i);\n    for (int i = 1; i &lt;= m; i++) \n        if (color[x[i]] != color[y[i]])\n            scc[color[x[i]]].push_back(color[y[i]]);\n    for (int i = 1; i &lt;= n; i++) \n        ans = max(ans, dfs(i));\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return;\n}\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n    if (multi) cin &gt;&gt; t;\n    while (t--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"GraphTheory/#_38","title":"\u9644\u4ef6","text":""},{"location":"GraphTheory/#tarjan","title":"Tarjan \u5272\u6865","text":""},{"location":"GraphTheory/#texttttwo-sat-2-sat","title":"$\\texttt{Two-SAT (2-SAT)}$ \u95ee\u9898","text":""},{"location":"GraphTheory/#_39","title":"\u7b97\u6cd5\u63cf\u8ff0","text":"<p>SAT \u662f\u9002\u5b9a\u6027\uff08Satisfiability\uff09\u95ee\u9898\u7684\u7b80\u79f0\u3002\u4e00\u822c\u5f62\u5f0f\u4e3a k - \u9002\u5b9a\u6027\u95ee\u9898\uff0c\u7b80\u79f0 k-SAT\u3002\u800c\u5f53 $k&gt;2$ \u65f6\u8be5\u95ee\u9898\u4e3a NP \u5b8c\u5168\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u7814\u7a76 $k=2$ \u7684\u60c5\u51b5\u3002</p> <p>2-SAT\uff0c\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u7ed9\u51fa $n$ \u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u5df2\u77e5\u82e5\u5e72\u4e2a $\\langle a,b \\rangle$\uff0c\u8868\u793a $a$ \u4e0e $b$ \u77db\u76fe\uff08\u5176\u4e2d $a$ \u4e0e $b$ \u5c5e\u4e8e\u4e0d\u540c\u7684\u96c6\u5408\uff09\u3002\u7136\u540e\u4ece\u6bcf\u4e2a\u96c6\u5408\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\uff0c\u5224\u65ad\u80fd\u5426\u4e00\u5171\u9009 $n$ \u4e2a\u4e24\u4e24\u4e0d\u77db\u76fe\u7684\u5143\u7d20\u3002\u663e\u7136\u53ef\u80fd\u6709\u591a\u79cd\u9009\u62e9\u65b9\u6848\uff0c\u4e00\u822c\u9898\u4e2d\u53ea\u9700\u8981\u6c42\u51fa\u4e00\u79cd\u5373\u53ef\u3002</p>"},{"location":"GraphTheory/#_40","title":"\u5e38\u7528\u89e3\u51b3\u65b9\u6cd5","text":""},{"location":"GraphTheory/#tarjan-scc","title":"Tarjan SCC \u7f29\u70b9","text":"<p>\u7b97\u6cd5\u8003\u7a76\u5728\u5efa\u56fe\u8fd9\u70b9\uff0c\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\u6765\u8bb2\uff1a</p> <p>\u5047\u8bbe\u6709 ${a1,a2}$ \u548c ${b1,b2}$ \u4e24\u5bf9\uff0c\u5df2\u77e5 $a1$ \u548c $b2$ \u95f4\u6709\u77db\u76fe\uff0c\u4e8e\u662f\u4e3a\u4e86\u65b9\u6848\u81ea\u6d3d\uff0c\u7531\u4e8e\u4e24\u8005\u4e2d\u5fc5\u987b\u9009\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u8981\u62c9\u4e24\u6761\u6709\u5411\u8fb9 $(a1,b1)$ \u548c $(b2,a2)$ \u8868\u793a\u9009\u4e86 $a1$ \u5219\u5fc5\u987b\u9009 $b1$\uff0c\u9009\u4e86 $b2$ \u5219\u5fc5\u987b\u9009 $a2$ \u624d\u80fd\u591f\u81ea\u6d3d\u3002</p> <p>\u7136\u540e\u901a\u8fc7\u8fd9\u6837\u5b50\u5efa\u8fb9\u6211\u4eec\u8dd1\u4e00\u904d Tarjan SCC \u5224\u65ad\u662f\u5426\u6709\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u540c\u4e00\u4e2a SCC \u4e2d\uff0c\u82e5\u6709\u5219\u8f93\u51fa\u4e0d\u53ef\u80fd\uff0c\u5426\u5219\u8f93\u51fa\u65b9\u6848\u3002\u6784\u9020\u65b9\u6848\u53ea\u9700\u8981\u628a\u51e0\u4e2a\u4e0d\u77db\u76fe\u7684 SCC \u62fc\u8d77\u6765\u5c31\u597d\u4e86\u3002</p> <p>\u8f93\u51fa\u65b9\u6848\u65f6\u53ef\u4ee5\u901a\u8fc7\u53d8\u91cf\u5728\u56fe\u4e2d\u7684\u62d3\u6251\u5e8f\u786e\u5b9a\u8be5\u53d8\u91cf\u7684\u53d6\u503c\u3002\u5982\u679c\u53d8\u91cf $x$ \u7684\u62d3\u6251\u5e8f\u5728 $\\neg x$ \u4e4b\u540e\uff0c\u90a3\u4e48\u53d6 $x$ \u503c\u4e3a\u771f\u3002\u5e94\u7528\u5230 Tarjan \u7b97\u6cd5\u7684\u7f29\u70b9\uff0c\u5373 $x$ \u6240\u5728 SCC \u7f16\u53f7\u5728 $\\neg x$ \u4e4b\u524d\u65f6\uff0c\u53d6 $x$ \u4e3a\u771f\u3002\u56e0\u4e3a Tarjan \u7b97\u6cd5\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u65f6\u4f7f\u7528\u4e86\u6808\uff0c\u6240\u4ee5 Tarjan \u6c42\u5f97\u7684 SCC \u7f16\u53f7\u76f8\u5f53\u4e8e\u53cd\u62d3\u6251\u5e8f\u3002</p> <p>\u663e\u7136\u5730\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n+m)$\u3002</p>"},{"location":"GraphTheory/#_41","title":"\u66b4\u641c","text":"<p>\u5c31\u662f\u6cbf\u7740\u56fe\u4e0a\u4e00\u6761\u8def\u5f84\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u9009\u62e9\u4e86\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u4ee5\u540e\u7684\u70b9\u90fd\u5c06\u88ab\u9009\u62e9\uff0c\u90a3\u4e48\uff0c\u51fa\u73b0\u4e0d\u53ef\u884c\u7684\u60c5\u51b5\u5c31\u662f\uff0c\u5b58\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u4e24\u8005\u90fd\u88ab\u9009\u62e9\u4e86\u3002</p> <p>\u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u6570\u636e\u4e0d\u5927\uff0c\u7b54\u6848\u603b\u662f\u53ef\u4ee5\u51fa\u6765\u7684\u3002</p> <pre><code>\n// \u6765\u6e90\uff1a\u5218\u6c5d\u4f73\u767d\u4e66\u7b2c 323 \u9875\nstruct Twosat {\n    int n;\n    vector&lt;int&gt; g[maxn * 2];\n    bool mark[maxn * 2];\n    int s[maxn * 2], c;\n\n    bool dfs(int x) {\n        if (mark[x ^ 1]) return false;\n        if (mark[x]) return true;\n        mark[x] = true;\n        s[c++] = x;\n        for (int i = 0; i &lt; (int)g[x].size(); i++)\n            if (!dfs(g[x][i])) return false;\n        return true;\n    }\n\n    void init(int n) {\n        this-&gt;n = n;\n        for (int i = 0; i &lt; n * 2; i++) g[i].clear();\n        memset(mark, 0, sizeof(mark));\n    }\n\n    void add_clause(int x, int y) { // \u8fd9\u4e2a\u51fd\u6570\u968f\u9898\u610f\u53d8\u5316\n        g[x].push_back(y ^ 1); // \u9009\u4e86 x \u5c31\u5fc5\u987b\u9009 y^1\n        g[y].push_back(x ^ 1);\n    }\n\n    bool solve() {\n        for (int i = 0; i &lt; n * 2; i += 2)\n            if (!mark[i] &amp;&amp; !mark[i + 1]) {\n                c = 0;\n                if (!dfs(i)) {\n                    while (c &gt; 0) mark[s[--c]] = false;\n                    if (!dfs(i + 1)) return false;\n                }\n            }\n        return true;\n    }\n};\n\n</code></pre>"},{"location":"GraphTheory/#_42","title":"\u4f8b\u9898","text":""},{"location":"GraphTheory/#1-p47822-sat","title":"\u4f8b 1 P4782\u3010\u6a21\u677f\u30112-SAT","text":""},{"location":"GraphTheory/#_43","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709 $n$ \u4e2a\u5e03\u5c14\u53d8\u91cf $x_1$$\\sim$$x_n$\uff0c\u53e6\u6709 $m$ \u4e2a\u9700\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u7684\u5f62\u5f0f\u90fd\u662f \u300c$x_i$ \u4e3a <code>true</code> / <code>false</code> \u6216 $x_j$ \u4e3a <code>true</code> / <code>false</code>\u300d\u3002\u6bd4\u5982 \u300c$x_1$ \u4e3a\u771f\u6216 $x_3$ \u4e3a\u5047\u300d\u3001\u300c$x_7$ \u4e3a\u5047\u6216 $x_2$ \u4e3a\u5047\u300d\u3002</p>"},{"location":"GraphTheory/#_44","title":"\u9898\u76ee\u5206\u6790","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconstexpr int N = 2e6 + 5; // \u4e24\u500d\u7a7a\u95f4\nint cnt, hd[N], nxt[N], to[N];\nvoid add(int u, int v) {nxt[++cnt] = hd[u], hd[u] = cnt, to[cnt] = v;}\nint n, m, dn, dfn[N], low[N], top, stc[N], vis[N], cn, col[N];\nvoid tarjan(int id) {\n  dfn[id] = low[id] = ++dn, vis[id] = 1, stc[++top] = id;\n  for(int i = hd[id]; i; i = nxt[i]) {\n    int it = to[i];\n    if(!dfn[it]) tarjan(it), low[id] = min(low[id], low[it]);\n    else if(vis[it]) low[id] = min(low[id], dfn[it]);\n  }\n  if(low[id] == dfn[id]) {\n    col[id] = ++cn;\n    while(stc[top] != id) col[stc[top]] = cn, vis[stc[top--]] = 0;\n    vis[id] = 0, top--;\n  }\n}\nint main() {\n  cin &gt;&gt; n &gt;&gt; m;\n  for(int i = 1; i &lt;= m; i++) {\n    int u, a, v, b;\n    scanf(\"%d%d%d%d\", &amp;u, &amp;a, &amp;v, &amp;b);\n    add(u + (!a) * n, v + b * n); // \u5f53 u \u7b49\u4e8e !a \u65f6\uff0cv \u5fc5\u987b\u7b49\u4e8e b\n    add(v + (!b) * n, u + a * n);\n  }\n  for(int i = 1; i &lt;= n * 2; i++) if(!dfn[i]) tarjan(i); // \u904d\u5386\u6240\u6709\u7684\u70b9\n  for(int i = 1; i &lt;= n; i++) if(col[i] == col[i + n]) puts(\"IMPOSSIBLE\"), exit(0); // \u5982\u679c\u4e24\u4e2a\u76f8\u4e92\u77db\u76fe\u7684\u5728\u4e00\u8d77\uff08\u53ef\u4ee5\u4e92\u63a8\uff09-&gt; IMPOSSIBLE\n  puts(\"POSSIBLE\");\n  for(int i = 1; i &lt;= n; i++) putchar('0' + (col[i + n] &lt; col[i])), putchar(' '); // \u9009 col \u8f83\u5c0f\u7684\n  return 0;\n}\n</code></pre>"},{"location":"GraphTheory/#2-hdu3062-party","title":"\u4f8b 2. HDU3062 Party","text":""},{"location":"GraphTheory/#_45","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709 n \u5bf9\u592b\u59bb\u88ab\u9080\u8bf7\u53c2\u52a0\u4e00\u4e2a\u805a\u4f1a\uff0c\u56e0\u4e3a\u573a\u5730\u7684\u95ee\u9898\uff0c\u6bcf\u5bf9\u592b\u59bb\u4e2d\u53ea\u6709 $1$ \u4eba\u53ef\u4ee5\u5217\u5e2d\u3002\u5728 $2n$ \u4e2a\u4eba\u4e2d\uff0c\u67d0\u4e9b\u4eba\u4e4b\u95f4\u6709\u7740\u5f88\u5927\u7684\u77db\u76fe\uff08\u5f53\u7136\u592b\u59bb\u4e4b\u95f4\u662f\u6ca1\u6709\u77db\u76fe\u7684\uff09\uff0c\u6709\u77db\u76fe\u7684 $2$ \u4e2a\u4eba\u662f\u4e0d\u4f1a\u540c\u65f6\u51fa\u73b0\u5728\u805a\u4f1a\u4e0a\u7684\u3002\u6709\u6ca1\u6709\u53ef\u80fd\u4f1a\u6709 $n$ \u4e2a\u4eba\u540c\u65f6\u5217\u5e2d\uff1f</p>"},{"location":"GraphTheory/#_46","title":"\u9898\u76ee\u5206\u6790","text":"<p>\u6309\u7167\u6211\u4eec\u4e0a\u9762\u7684\u5206\u6790\uff0c\u5982\u679c $a1$ \u4e2d\u7684\u4e08\u592b\u548c $a2$ \u4e2d\u7684\u59bb\u5b50\u4e0d\u5408\uff0c\u6211\u4eec\u5c31\u628a $a1$ \u4e2d\u7684\u4e08\u592b\u548c $a2$ \u4e2d\u7684\u4e08\u592b\u8fde\u8fb9\uff0c\u628a $a2$ \u4e2d\u7684\u59bb\u5b50\u548c $a1$ \u4e2d\u7684\u59bb\u5b50\u8fde\u8fb9\uff0c\u7136\u540e\u7f29\u70b9\u67d3\u8272\u5224\u65ad\u5373\u53ef\u3002</p> <pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n#define maxn 2018\n#define maxm 4000400\nusing namespace std;\nint Index, instack[maxn], DFN[maxn], LOW[maxn];\nint tot, color[maxn];\nint numedge, head[maxn];\n\nstruct Edge {\n  int nxt, to;\n} edge[maxm];\n\nint sta[maxn], top;\nint n, m;\n\nvoid add(int x, int y) {\n  edge[++numedge].to = y;\n  edge[numedge].nxt = head[x];\n  head[x] = numedge;\n}\n\nvoid tarjan(int x) {  // \u7f29\u70b9\u770b\u4e0d\u61c2\u8bf7\u79fb\u6b65\u5f3a\u8fde\u901a\u5206\u91cf\u4e0a\u9762\u6709\u4e00\u4e2a\u94fe\u63a5\u53ef\u4ee5\u70b9\u3002\n  sta[++top] = x;\n  instack[x] = 1;\n  DFN[x] = LOW[x] = ++Index;\n  for (int i = head[x]; i; i = edge[i].nxt) {\n    int v = edge[i].to;\n    if (!DFN[v]) {\n      tarjan(v);\n      LOW[x] = min(LOW[x], LOW[v]);\n    } else if (instack[v])\n      LOW[x] = min(LOW[x], DFN[v]);\n  }\n  if (DFN[x] == LOW[x]) {\n    tot++;\n    do {\n      color[sta[top]] = tot;  // \u67d3\u8272\n      instack[sta[top]] = 0;\n    } while (sta[top--] != x);\n  }\n}\n\nbool solve() {\n  for (int i = 0; i &lt; 2 * n; i++)\n    if (!DFN[i]) tarjan(i);\n  for (int i = 0; i &lt; 2 * n; i += 2)\n    if (color[i] == color[i + 1]) return 0;\n  return 1;\n}\n\nvoid init() {\n  top = 0;\n  tot = 0;\n  Index = 0;\n  numedge = 0;\n  memset(sta, 0, sizeof(sta));\n  memset(DFN, 0, sizeof(DFN));\n  memset(instack, 0, sizeof(instack));\n  memset(LOW, 0, sizeof(LOW));\n  memset(color, 0, sizeof(color));\n  memset(head, 0, sizeof(head));\n}\n\nint main() {\n  while (~scanf(\"%d%d\", &amp;n, &amp;m)) {\n    init();\n    for (int i = 1; i &lt;= m; i++) {\n      int a1, a2, c1, c2;\n      scanf(\"%d%d%d%d\", &amp;a1, &amp;a2, &amp;c1, &amp;c2);  // \u81ea\u5df1\u505a\u7684\u65f6\u5019\u522b\u7528 cin \u4f1a\u88ab\u5361\n      add(2 * a1 + c1, 2 * a2 + 1 - c2);\n      // \u5bf9\u4e8e\u7b2c i \u5bf9\u592b\u5987\uff0c\u6211\u4eec\u7528 2i+1 \u8868\u793a\u4e08\u592b\uff0c2i \u8868\u793a\u59bb\u5b50\u3002\n      add(2 * a2 + c2, 2 * a1 + 1 - c1);\n    }\n    if (solve())\n      printf(\"YES\\n\");\n    else\n      printf(\"NO\\n\");\n  }\n  return 0;\n}\n</code></pre>"},{"location":"GraphTheory/#3-gym-101987-tv-show-game","title":"\u4f8b 3. Gym 101987 TV Show Game","text":""},{"location":"GraphTheory/#_47","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709 $k(k&gt;3)$ \u76cf\u706f\uff0c\u6bcf\u76cf\u706f\u662f\u7ea2\u8272\u6216\u8005\u84dd\u8272\uff0c\u4f46\u662f\u521d\u59cb\u7684\u65f6\u5019\u4e0d\u77e5\u9053\u706f\u7684\u989c\u8272\u3002\u6709 $n$ \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u9009\u62e9 3 \u76cf\u706f\u5e76\u731c\u706f\u7684\u989c\u8272\u3002\u4e00\u4e2a\u4eba\u731c\u5bf9\u4e24\u76cf\u706f\u6216\u4ee5\u4e0a\u7684\u989c\u8272\u5c31\u53ef\u4ee5\u83b7\u5f97\u5956\u54c1\u3002\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u706f\u7684\u7740\u8272\u65b9\u6848\u4f7f\u5f97\u6bcf\u4e2a\u4eba\u90fd\u80fd\u9886\u5956\uff0c\u82e5\u6709\u5219\u8f93\u51fa\u4e00\u79cd\u706f\u7684\u7740\u8272\u65b9\u6848\u3002</p>"},{"location":"GraphTheory/#_48","title":"\u9898\u76ee\u5206\u6790","text":"<p>\u8fd9\u9053\u9898\u5728\u5224\u65ad\u662f\u5426\u6709\u65b9\u6848\u7684\u57fa\u7840\u4e0a\uff0c\u5728\u6709\u65b9\u6848\u65f6\u8fd8\u8981\u8f93\u51fa\u4e00\u4e2a\u53ef\u884c\u89e3\u3002</p> <p>\u6839\u636e \u4f0d\u6631 -\u300a\u7531\u5bf9\u79f0\u6027\u89e3 2-sat \u95ee\u9898\u300b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\uff1a\u5982\u679c\u8981\u8f93\u51fa 2-SAT \u95ee\u9898\u7684\u4e00\u4e2a\u53ef\u884c\u89e3\uff0c\u53ea\u9700\u8981\u5728 tarjan \u7f29\u70b9\u540e\u6240\u5f97\u7684 DAG \u4e0a\u81ea\u5e95\u5411\u4e0a\u5730\u8fdb\u884c\u9009\u62e9\u548c\u5220\u9664\u3002</p> <p>\u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7\u6784\u9020 DAG \u7684\u53cd\u56fe\u540e\u5728\u53cd\u56fe\u4e0a\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\u5b9e\u73b0\uff1b\u4e5f\u53ef\u4ee5\u6839\u636e tarjan \u7f29\u70b9\u540e\uff0c\u6240\u5c5e\u8fde\u901a\u5757\u7f16\u53f7\u8d8a\u5c0f\uff0c\u8282\u70b9\u8d8a\u9760\u8fd1\u53f6\u5b50\u8282\u70b9\u8fd9\u4e00\u6027\u8d28\uff0c\u4f18\u5148\u5bf9\u6240\u5c5e\u8fde\u901a\u5757\u7f16\u53f7\u5c0f\u7684\u8282\u70b9\u8fdb\u884c\u9009\u62e9\u3002</p> <p>\u4e0b\u9762\u7ed9\u51fa\u7b2c\u4e8c\u79cd\u5b9e\u73b0\u65b9\u6cd5\u7684\u4ee3\u7801\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn = 1e4 + 5;\nconst int maxk = 5005;\n\nint n, k;\nint id[maxn][5];\nchar s[maxn][5][5], ans[maxk];\nbool vis[maxn];\n\nstruct Edge {\n  int v, nxt;\n} e[maxn * 100];\n\nint head[maxn], tot = 1;\n\nvoid addedge(int u, int v) {\n  e[tot].v = v;\n  e[tot].nxt = head[u];\n  head[u] = tot++;\n}\n\nint dfn[maxn], low[maxn], color[maxn], stk[maxn], ins[maxn], top, dfs_clock, c;\n\nvoid tarjan(int x) {  // tarjan\u7b97\u6cd5\u6c42\u5f3a\u8054\u901a\n  stk[++top] = x;\n  ins[x] = 1;\n  dfn[x] = low[x] = ++dfs_clock;\n  for (int i = head[x]; i; i = e[i].nxt) {\n    int v = e[i].v;\n    if (!dfn[v]) {\n      tarjan(v);\n      low[x] = min(low[x], low[v]);\n    } else if (ins[v])\n      low[x] = min(low[x], dfn[v]);\n  }\n  if (dfn[x] == low[x]) {\n    c++;\n    do {\n      color[stk[top]] = c;\n      ins[stk[top]] = 0;\n    } while (stk[top--] != x);\n  }\n}\n\nint main() {\n  scanf(\"%d %d\", &amp;k, &amp;n);\n  for (int i = 1; i &lt;= n; i++) {\n    for (int j = 1; j &lt;= 3; j++) scanf(\"%d%s\", &amp;id[i][j], s[i][j]);\n\n    for (int j = 1; j &lt;= 3; j++) {\n      for (int k = 1; k &lt;= 3; k++) {\n        if (j == k) continue;\n        int u = 2 * id[i][j] - (s[i][j][0] == 'B');\n        int v = 2 * id[i][k] - (s[i][k][0] == 'R');\n        addedge(u, v);\n      }\n    }\n  }\n\n  for (int i = 1; i &lt;= 2 * k; i++)\n    if (!dfn[i]) tarjan(i);\n\n  for (int i = 1; i &lt;= 2 * k; i += 2)\n    if (color[i] == color[i + 1]) {\n      puts(\"-1\");\n      return 0;\n    }\n\n  for (int i = 1; i &lt;= 2 * k; i += 2) {\n    int f1 = color[i], f2 = color[i + 1];\n    if (vis[f1]) {\n      ans[(i + 1) &gt;&gt; 1] = 'R';\n      continue;\n    }\n    if (vis[f2]) {\n      ans[(i + 1) &gt;&gt; 1] = 'B';\n      continue;\n    }\n    if (f1 &lt; f2) {\n      vis[f1] = 1;\n      ans[(i + 1) &gt;&gt; 1] = 'R';\n    } else {\n      vis[f2] = 1;\n      ans[(i + 1) &gt;&gt; 1] = 'B';\n    }\n  }\n  ans[k + 1] = 0;\n  printf(\"%s\\n\", ans + 1);\n  return 0;\n}\n</code></pre>"},{"location":"GraphTheory/#4-cf1971h-1-texttt2100","title":"\u4f8b 4. CF1971H \u00b11 $\\texttt{*2100}$","text":"<p>\u6211\u4eec\u53d1\u73b0\u8981\u60f3\u6ee1\u8db3\u8981\u6c42\uff0c\u5c31\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a</p> <ul> <li>\u6bcf\u4e00\u5217\u90fd\u6709\u4e14\u6070\u597d\u4ec5\u6709\u4e00\u4e2a $-1$\u3002</li> </ul> <p>\u6211\u4eec\u4ee4 $g_{i,0}$ \u8868\u793a $a_i$ \u5fc5\u987b\u53d6 $-1$\uff0c$g_{i,1}$ \u5fc5\u987b\u53d6 $1$\u3002</p> <p>\u6211\u4eec\u8003\u8651\u4e24\u4e2a\u5728\u540c\u4e00\u5217\u7684\u6570 $a_i,a_j$\uff1a</p> <ol> <li>\u82e5 $a_i&lt;0\\wedge a_j&lt;0$\uff0c\u82e5 $-a_i=-1,-a_j=1$\uff0c\u5219 $a_i=1,a_j=-1$\uff0c\u5c06 $g_{i,1}$ \u4e0e $g_{j,0}$ \u8fde\u8fb9\u3002</li> <li>\u82e5 $a_i&lt;0\\wedge a_j&gt;0$\uff0c\u82e5 $-a_i=-1,a_j=1$\uff0c\u5219 $a_i=1,a_j=1$\uff0c\u5c06 $g_{i,1}$ \u4e0e $g_{j,1}$ \u8fde\u8fb9\u3002</li> <li>\u82e5 $a_i&gt;0\\wedge a_j&lt;0$\uff0c\u82e5 $-a_i=1,a_j=-1$\uff0c\u5219 $a_i=-1,a_j=-1$\uff0c\u5c06 $g_{i,0}$ \u4e0e $g_{j,0}$ \u8fde\u8fb9\u3002</li> <li>\u82e5 $a_i&gt;0\\wedge a_j&gt;0$\uff0c\u82e5 $-a_i=1,a_j=1$\uff0c\u5219 $a_i=-1,a_j=1$\uff0c\u5c06 $g_{i,0}$ \u4e0e $g_{j,1}$ \u8fde\u8fb9\u3002</li> </ol> <p>\u7136\u540e\u8dd1\u4e00\u904d $\\texttt{tarjan}$\uff0c\u6c42 $\\texttt{SCC}$\uff0c\u8003\u8651\u662f\u5426\u6709\u89e3\u5373\u53ef\u3002</p> <p>Code</p>"},{"location":"GraphTheory/#_49","title":"\u53c2\u8003\u8d44\u6599","text":"<ul> <li>\u56fe\u8bba I</li> <li>OI-WiKi</li> </ul> \u65bd\u5de5\u8fdb\u5ea6  - [X] \u62d3\u6251\u6392\u5e8f - [X] $\\texttt{Floyd}$ \u7b97\u6cd5\u6c42\u6700\u77ed\u8def - [X] $\\texttt{Dijstra}$ \u7b97\u6cd5\u6c42\u6700\u77ed\u8def - [X] $\\texttt{SPFA}$ \u7b97\u6cd5\u6c42\u6700\u77ed\u8def - [X] $\\texttt{Tarjan}$ \u7b97\u6cd5\u6c42\u5f3a\u8fde\u901a\u5206\u91cf - [X] \u7f29\u70b9 - [X] 2-SAT - [ ] \u6700\u5c0f\u751f\u6210\u6811 - [ ] $\\texttt{Kruskal}$ \u7b97\u6cd5 - [ ] $\\texttt{Prim}$ \u7b97\u6cd5 - [ ] \u6b27\u62c9\u56de\u8def - [ ] \u6b27\u62c9\u8def\u5f84 - [ ] \u6b27\u62c9\u56fe - [ ] \u4e8c\u5206\u56fe - [ ] \u6700\u5927\u5339\u914d - [ ] \u6700\u5927\u6d41 - [ ] \u6700\u5c0f\u5272 - [ ] \u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 - [ ] \u6700\u77ed\u8def\u5f84\u6811 - [ ] \u6700\u957f\u8def\u5f84\u6811 - [ ] \u6700\u957f\u8def"}]}